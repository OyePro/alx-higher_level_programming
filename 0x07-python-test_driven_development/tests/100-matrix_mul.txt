==========================================
 Testing function matrix_mul with doctest
==========================================

 # run with ``python3 -m doctest -v ./tests/100-matrix_mul.txt``
=================================================================

`` Importing the function 'matrix_mul' ``
::
    >>> matrix_mul = __import__("100-matrix_mul").matrix_mul

`` Testing the success of the function ``
::
    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
    [[7, 10], [15, 22]]
    >>> matrix_mul([[1, 2.0]], [[3, 4], [5, 6]])
    [[13.0, 16.0]]
    >>> matrix_mul([[0, 2], [5, 4]], [[-1, 2], [3, 8]])
    [[6, 16], [7, 42]]
    >>> matrix_mul([[0, -2], [-5.0, 4]], [[-1.4, 2], [-3.5, 8]])
    [[7.0, -16], [-7.0, 22.0]]

`` Testing the exception raised ``
::
    >>> matrix_mul(((1, 2), (3, 4)), [[3, 4], [5, 6]])
    Traceback (most recent call last):
    ...
    TypeError: m_a must be a list

    >>> matrix_mul([[1, 2], [3, 4]], ([3, 4], [5, 6]))
    Traceback (most recent call last):
    ...
    TypeError: m_b must be a list

    >>> matrix_mul([1, 2, 3], [[1, 3]])
    Traceback (most recent call last):
    ...
    TypeError: m_a must be a list of lists

    >>> matrix_mul([[1, 2.0]], [{1, 3, 4}, {1, 4, 6}])
    Traceback (most recent call last):
    ...
    TypeError: m_b must be a list of lists

    >>> matrix_mul([], [[1, 2]])
    Traceback (most recent call last):
    ...
    ValueError: m_a can't be empty

    >>> matrix_mul([[1, 4.0]], [[]])
    Traceback (most recent call last):
    ...
    ValueError: m_b can't be empty

    >>> matrix_mul([[1, 2, "b"]], [[1, 3], [1, 5], [1, 6]])
    Traceback (most recent call last):
    ...
    TypeError: m_a should contain only integers or floats

    >>> matrix_mul([[1, 2], [3.2, 4.0]], [[4.4, 6], [2, True]])
    Traceback (most recent call last):
    ...
    TypeError: m_b should contain only integers or floats

    >>> matrix_mul([[1, 2], [1, 2, 3]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    TypeError: each row of m_a must be of the same size

    >>> matrix_mul([[1, 2.0], [3.0, 4]], [[9, 6, 5], [1, 3, 4, 6]])
    Traceback (most recent call last):
    ...
    TypeError: each row of m_b must be of the same size

    >>> matrix_mul([[1, 2], [3, 4]], [[7, 9]])
    Traceback (most recent call last):
    ...
    ValueError: m_a and m_b can't be multiplied

    >>> matrix_mul([[]])
    Traceback (most recent call last):
    ...
    TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

    >>> matrix_mul()
    Traceback (most recent call last):
    ...
    TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
