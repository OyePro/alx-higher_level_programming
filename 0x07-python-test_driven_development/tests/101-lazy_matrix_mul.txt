===============================================
 Testing function lazy_matrix_mul with doctest
===============================================

 # run with ``python3 -m doctest -v ./tests/101-lazy_matrix_mul.txt``
======================================================================

`` Importing the function 'lazy_matrix_mul' ``
::
    >>> lazy_matrix_mul = __import__("101-lazy_matrix_mul").lazy_matrix_mul

`` Testing the success of the function ``
::
    >>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
    [[ 7 10]
     [15 22]]

    >>> print(lazy_matrix_mul([[1, 2.0]], [[3, 4], [5, 6]]))
    [[13. 16.]]

    >>> print(lazy_matrix_mul([[0, 2], [5, 4]], [[-1, 2], [3, 8]]))
    [[ 6 16]
     [ 7 42]]

    >>> print(lazy_matrix_mul([[0, -2], [-5.0, 4]], [[-1.4, 2], [-3.5, 8]]))
    [[  7. -16.]
     [ -7.  22.]]

    >>> print(lazy_matrix_mul([[1,2]], [3, 4]))
    [11]

    >>> print(lazy_matrix_mul([1, 2], [3, 4]))
    11


`` Testing the exception raised ``

Test minimum of two arguments must be provided.
::
    >>> print(lazy_matrix_mul([[2, 5]]))
    Traceback (most recent call last):
	...
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

    >>> print(lazy_matrix_mul()) 
    Traceback (most recent call last):
	...
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

Test two matrices cannot be multiplied 
::
    >>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [2, 3], [4, 5]]))
    Traceback (most recent call last):
	...
    ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)


Test empty parameters
::
    >>> print(lazy_matrix_mul([[]], [[5, 6], [7, 8]]))
    Traceback (most recent call last):
    ...
    ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

    >>> print(lazy_matrix_mul([[5, 6], [7, 8]], [[]]))
    Traceback (most recent call last):
    ...
    ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)


Test parameter must be list. 
::
    >>> print(lazy_matrix_mul("JOY", [[1, 2]]))
    Traceback (most recent call last):
    ...
    ValueError: Scalar operands are not allowed, use '*' instead

    >>> print(lazy_matrix_mul([[1, 2]], "abc"))
    Traceback (most recent call last):
    ...
    ValueError: Scalar operands are not allowed, use '*' instead

    >>> print(lazy_matrix_mul("python", "test"))
    Traceback (most recent call last):
    ...
    ValueError: Scalar operands are not allowed, use '*' instead

    >>> print(lazy_matrix_mul(None, None))
    Traceback (most recent call last):
    ...
    TypeError: Object arrays are not currently supported

Test whether it's a list of lists
::
    >>> print(lazy_matrix_mul([1, 2], [[3, 4]]))
    Traceback (most recent call last):
    ...
    ValueError: shapes (2,) and (1,2) not aligned: 2 (dim 0) != 1 (dim 0)


Test element is integer, float or not
::
    >>> print(lazy_matrix_mul([[1, "b"]], [[3, 4]]))
    Traceback (most recent call last):
    ...
    ValueError: shapes (1,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)


    >>> print(lazy_matrix_mul([[5, 6], [6, 4]], [[5, "a"], [7, 8]]))
    Traceback (most recent call last):
    ...
    TypeError: invalid data type for einsum
    
    >>> print(lazy_matrix_mul([[1, "v"]], [[{"age": 5}, 7.3]]))
    Traceback (most recent call last):
    ...
    TypeError: Object arrays are not currently supported

    >>> print(lazy_matrix_mul([[1, 2], [3, 4, 5]], [[1, 2], [3, 4]]))
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence.

    >>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[6, 7, 8], [3, 2]]))
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence.

    >>> m_a = [[1, 2],
    ... [3, 4, 5]
    ... ]
    >>> m_b = m_a
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence.
